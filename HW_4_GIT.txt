JSON
4. Создать внешний репозиторий c названием JSON:
	1) Кликнуть на иконку "+" в правом верхнем углу сайта GitHub
	2) Кликнуть левой кнопкой мыши на "New repository"
	3) В поле "Repository name" ввести нужное нам имя репозитория (JSON)
	4) В Switch Box "Add a README file" поставить галочку
	5) Проскролить вниз страницы, кликнуть левой кнопкой мыши по кнопке "Create repositiry" 

5. Клонировать репозиторий JSON на локальный компьютер.
	1) Зайти в репозиторий JSON на Git Hub
	2) Кликнуть кнопку "Code"
	3) Скопировать URL репозитория в отобразившейся вкладке
	4) Зайти в Git Bash на локальном устройстве
	5) Ввести команду git clone "вставить скопированый URL"

6. Внутри локального JSON создать файл “new.json”.
	cd JSON
	touch new.json
	
7. Добавить файл под гит.
	git add new.json

8. Закоммитить файл.
	git commit -m "create new.json"
	
9. Отправить файл на внешний GitHub репозиторий.
	git push

10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
	vim new.json
	Insert
	{ 
		"name": "Leonid",
		"last_name": "Bakurin",
		"patronimic_name": "Vladimirovich",
		"age": 28,
		"number_of_pets": "I_have_got_the_dog_and_her_is_naame_Gulya",
		"future_desired_salary": "later_2_years_2000$"
	}
	esc
	:wq

11. Отправить изменения на внешний репозиторий.
	git commit -am "add info in new.json"
	git push	

12. Создать файл preferences.json
	touch preferences.json

13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
	vim preferences.json
	Insert
	{ 
		"my_favorite_films": "1+1",
		"my_favorite_serial": "Sharp visors",
		"my_fovorite_food": "Pasta",
		"my_favorite_season": "spring",
		"coutries_to_visit": ["Norway", "Bali", "USA", "Great_Britan"]
	}
	esc
	:wq

14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	vim sklls.json
	Insert
	{
		"1": ["Базовая_теория", "Что_такое_тестирование", "багрепорты", "документация", "виды_методы_направления_тестирования", "SDLC", "STLC"],
		"2": "Что_такое_клиент_серверная_архитектура.",
		"3": "Методы_запросов_на_сервер.",
		"4": "Ответы_сервера.",
		"5": "Структуры_запросов_и_ответов.",
		"6": "Что_такое_JSON_XML_Их_структура",
		"7": "Тестирование_API.",
		"8": "Снятие_и_чтение_логов.",
		"9": ["Postman", "Fidler"],
		"10": {"VPN":["как_работает", "зачем_нужен", "как_использовать", "варианты_инструментов"]},
		"11": {"Dev_Tools_веб_браузеров":["Google_Chrome", "FireFox"]},
		"12": "Мобильное_тестирование.",
		"13": "Особенность_iOS_Android_гайдлайны.",
		"14": "Сборка_iOS_приложений_на_XCode",
		"15": "Сборка_Android_приложений_на_Android_Studio",
		"16": "Перехват_мобильного_трафика_через_Charles",
		"17": "Настройка_прокси_на_iOS_и_Android.",
		"18": "Командная_строка_(terminal)_Linux_Ubuntu",
		"18_1":["Копирование", "создание", "просмотр", "перемещение_файлов_на_серверах_без_графического_интерфейса"],
		"19": "Простой_bash_скриптринг",
		"19_1": "автоматизация_рутинных_задач_на_сервере.",
		"20": "Доступ_к_удалённым_серверам.",
		"21": {"Основы_SQL": ["Create", "Delete", "Drop", "Insert_Into", "Select", "From", "Where", "Join"]},
		"22": "Git",
		"23": "Jmeter",
		"24": "Методология_разработки_Scrum",
		"25": "Python_Создание_собственного_клиент-серверного_приложения."
	}

15. Отправить сразу 2 файла на внешний репозиторий.
	git add .
	git commit -m "create and add info in files preferences.json and sklls.js"
	git push

16. На веб интерфейсе создать файл bug_report.json.
	1) Зайти в репозиторий JSON на Git Hub
	2) Кликнуть на кнопку Add file
	3) В отоброжаемом окне кликнуть Create new file
	4) Присвоить имя создоваемому файлу bug_report.json
	
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	1) Проскролить страницу из 16-го задания вниз и нажать на кнопку "Commit new file"	

18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
	1) Зайти в репозиторий JSON
	2) Кликнуть на файл bug_report.json 
	3) Кликнуть на занчок карандаша ("Edit this file")

	{
		"bug_report":
			{
				"title": "name_title",
	    			"steps_to_reproduce": ["step1", "step2", "step3"],
	    			"expected_result": "the_result_we_need",
	    			"actual_result": "the_result_of_which_must_be",
	    			"priority factor": ["Low", "Medium", "High"],
	    			"severity factor": ["Trivial", "Minor", "Major", "Critical", "Blocker"]
	   		}
	}

19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	1) Проскролить страницу вниз, описать изменеия в файле в поле "Commit changes" и нажать на кнопку  "Commit new file"

20. Синхронизировать внешний и локальный репозиторий JSON
	git fetch
	git pull

XML
21. Создать внешний репозиторий c названием XML.
	1) Кликнуть на иконку "+" в правом верхнем углу сайта GitHub
	2) Кликнуть левой кнопкой мыши на "New repository"
	3) В поле "Repository name" ввести нужное нам имя репозитория (XML)
	4) В Switch Box "Add a README file" поставить галочку
	5) Проскролить вниз страницы, кликнуть левой кнопкой мыши по кнопке "Create repositiry" 

22. Клонировать репозиторий XML на локальный компьютер.
	1) Зайти в репозиторий XML на Git Hub
	2) Кликнуть кнопку "Code"
	3) Скопировать URL репозитория в отобразившейся вкладке
	4) Зайти в Git Bash на локальном устройстве
	5) Ввести команду git clone "вставить скопированый URL"

23. Внутри локального XML создать файл “new.xml”.
	cd XML
	touch new.xml

24. Добавить файл под гит.
	git add new.xml

25. Закоммитить файл.
	git commit -m "create file new.xml"

26. Отправить файл на внешний GitHub репозиторий.
	git push

27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
	vim new.xml
	Insert
	<myself>
		<name>Leonid</name>
		<last_name>Bakurin<last_name>
		<patronimic_name>Vladimirovich</patronimic_name>
		<age>28</age>
		<number_of_pets>I_have_got_the_dog_and_her_is_name_Gulya</number_of_pets>
		<future_desired_salary>later_2_years_2000$</future_desired_salary>
	</myself>	
	esc
	:wq

28. Отправить изменения на внешний репозиторий.
	git commit -am "add info in file new.xml"
	git push

29. Создать файл preferences.xml
	touch preferences.xml

30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
	vim preferences.xml
	Insert
	<myintresting>
		<my_favorite_films>1+1</my_favorite_films>
		<my_favorite_serial>Sharp_visors</my_favorite_serial>
		<my_fovorite_food>Pasta</my_favorite_food>
		<my_favorite_season>spring</my_favorite_season>
		<coutries_to_visit>
			<countries1>Norway</countries1>
			<countries2>Bali</counries2>
			<countries3>USA</countries3>
			<countries4>Great_Britan</countries4>
		</countries_to_visit>
	</myintresting>	
	esc
	:wq

31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	vim sklls.xml
	Insert
	<qaksendzov>
		<part_1>
			<part_1_1>Базовая_теория</part_1_1>
			<part_1_1>Что_такое_тестирование</part_1_1>
			<part_1_3>Багрепорты</part_1_3>
			<part_1_4>Документация</part_1_4>
			<part_1_5>Виды_методы_направления_тестирования</part_1_4>
			<part_1_6>SDLC</part_1_6>
	       		<part_1_7>STLC</part_1_7>
		</part_1>
		<part_2>Что_такое_клиент_серверная_архитектура</part_2>
		<part_3>Методы_запросов_на_сервер</part_3>
		<part_4>Ответы_сервера</part_4>
		<part_5>Структуры_запросов_и_ответов</part_5>
		<part_6>
			<part_6_1>Что_такое_JSON</part_6_1>
	        	<part_6_2>Что_такое_XML</part_6_2>
	        	<part_6_3>Структура_JSON_XML</part_6_3>
		</part_6>
		<part_7>Тестирование_API</part_7>
		<part_8>Снятие_и_чтение_логов</part_8>
		<part_9>Postman_Fidler</part_9>
		<part_10>
			<part_10_1>VPN.</part_10_1>
			<part_10_2>Как_работает_VPN</part_10_2>
			<part_10_3>Зачем_нужен_VPN</part_10_3>
			<part_10_4>Как_использовать_VPN</part_10_4>
		</part_10>
        	<part_11>Dev_Tools_веб_браузеров</part_11>
		<part_12>Мобильное_тестирование</part_12>
		<part_13>
			<part_13_1>Особенность_iOS</part_13_1>
			<part_13_2>Особбеность_Android</part_13_2>
			<part_13_3>Гайдлайны</part_13_3>
        	</part_13>	
		<part_14>Сборка_iOS_приложений_на_XCode</part_14>
		<part_15>Сборка_Android_приложений_на_Android_Studio</part_15>
		<part_16>Перехват_мобильного_трафика_через_Charles</part_16>
		<part_17>
			<part_17_1>Настройка_прокси_на_iOS</part_17_1>
	       		<part_17_2>Настройка_прокси_на_Android</part_17_2>
		</part_17>
		<part_18>
			<part_18_1>Командная_строка_Linux_Ubuntu</part_18_1>
			<part_18_2>Копирование_файлов_на_сервер</part_18_2>
			<part_18_3>Создание_файлов_на_сервер</part_18_3>
			<part_18_4>Просмотр_файлов_на_сервере</part_18_4>
			<part_18_5>Перемещение_файлов_на_серверах_без_графического_интерфейса</part_18_5>
		</part_18>
		<part_19>Простой_bash_скриптринг_автоматизация_рутинных_задач_на_сервере</part_19>
		<part_20>Доступ_к_удалённым_серверам</part_20>
		<part_21>Основы_SQL</part_21>
		<part_22>Git</part_22>
		<part_23>Jmeter</part_23>
		<part_24>Методология_разработки_Scrum</part_24>
		<part_25>Python_Создание_собственного_клиент-серверного_приложения</part_25>
	</qaksendzov>
	esc
	:wq

32. Сделать коммит в одну строку.
	git add . && git commit -m "create files sklls.xml and preferences.xml

33. Отправить сразу 2 файла на внешний репозиторий.
	git push

34. На веб интерфейсе создать файл bug_report.xml.
	1) Зайти в репозиторий JSON на Git Hub
	2) Кликнуть на кнопку Add file
	3) В отоброжаемом окне кликнуть Create new file
	4) Присвоить имя создоваемому файлу bug_report.xml


35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	1) Проскролить страницу из 34-го задания вниз и нажать на кнопку "Commit new file"

36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
	1) Зайти в репозиторий XML
	2) Кликнуть на файл bug_report.xml 
	3) Кликнуть на занчок карандаша ("Edit this file")
	<bug_report>
  		<title>name_title</title>
  		<steps_to_reproduce>
    			<number_step>Step1</number_step>
    			<number_step>Step2</number_step>
    			<number_step>Step3</number_step>
  		</steps_to_reproduce>
  	<expected_result>the_result_we_need</expected_result>
  	<actual_result>the_result_of_which_must_be</actual_result>
 	 <priority_factor>
    		<priority_factor1>Low</priority_factor1>
    		<priority_factor2>Medium</priority_factor2>
   		 <priority_factor3>High</priority_factor3>
 	 </priority_factor>
  	<severity_factor>
    		<severity_factor1>Trivial</severity_factor1>
   		<severity_factor2>Minor</severity_factor2>
    		<severity_factor3>Major</severity_factor3>
    		<severity_factor4>Critical</severity_factor4>
    		<severity_factor5>Blocker</severity_factor5>
 	<severity_factor>
	</bug_report>

37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	1) Проскролить страницу вниз, описать изменеия в файле в поле "Commit changes" и нажать на кнопку  "Commit new file"

38. Синхронизировать внешний и локальный репозиторий XML
	git fetch
	git pull

TXT
39. Создать внешний репозиторий c названием TXT.
	1) Кликнуть на иконку "+" в правом верхнем углу сайта GitHub
	2) Кликнуть левой кнопкой мыши на "New repository"
	3) В поле "Repository name" ввести нужное нам имя репозитория (TXT)
	4) В Switch Box "Add a README file" поставить галочку
	5) Проскролить вниз страницы, кликнуть левой кнопкой мыши по кнопке "Create repositiry" 


40. Клонировать репозиторий TXT на локальный компьютер.
	1) Зайти в репозиторий TXT на Git Hub
	2) Кликнуть кнопку "Code"
	3) Скопировать URL репозитория в отобразившейся вкладке
	4) Зайти в Git Bash на локальном устройстве
	5) Ввести команду git clone "вставить скопированый URL"

41. Внутри локального TXT создать файл “new.txt”.
	cd TXT
	touch new.txt
	
42. Добавить файл под гит.
	git add new.txt

43. Закоммитить файл.
	git commit -m "create new.txt"

44. Отправить файл на внешний GitHub репозиторий.
	git push

45. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
	vim new.txt
	Insert
	1. name- Leon
	2. last name- Bakurin
	3. patronimic name- Vladimirovich
	4. age- 28
	5. number of pets- I have got the dog and her is naame Gulya
	6. future desired salary- later 2 years 2000$
	esc
	:wq

46. Отправить изменения на внешний репозиторий.
	git commit -am "add information new.txt"
	git push

47. Создать файл preferences.txt
	touch preferences.txt

48. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
	vim preferences.txt
	Insert 
	1. My favorite films: 1+1, Leon, Достучаться до небес, Человек который изменил всё и др.
	2. My favorite serial-Острые козырьки.
	3. My fovorite food: Драники, паста, суп харчо.
	4. My favorite season-spring.
	5. Coutries to visit: Norway, Bali, USA, Great Britan.
	esc
	:wq

49. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
	vim sklls.txt
	Insert
	1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC
	2. Что такое клиент серверная архитектура.
	3. Методы запросов на сервер.
	4. Ответы сервера.
	5. Структуры запросов и ответов.
	6. Что такое JSON, XML. Их структура.
	7. Тестирование API.
	8. Снятие и чтение логов.
	9. Postman, Fidler.
	10. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
	11. Dev Tools веб браузеров (Google Chrome, FireFox).
	12. Мобильное тестирование.
	13. Особенность iOS, Android, гайдлайны.
	14. Сборка iOS приложений на XCode
	15. Сборка Android приложений на Android Studio
	16. Перехват мобильного трафика (сниффинг) через Charles
	17. Настройка прокси на iOS и Android.
	18. Командная строка (terminal) Linux Ubuntu. Копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса. 
	19. Простой bash скриптринг , автоматизация рутинных задач на сервере.
	20. Доступ к удалённым серверам.
	21. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join
	22. Git
	23. Jmeter
	24. Методология разработки Scrum
	25. Python. Создание собственного клиент-серверного приложения прокси на iOS и Android.
	esc
	:wq

50. Сделать коммит в одну строку.
	git add . && git commit -m "create files sklls.txt and preferences.txt"

51. Отправить сразу 2 файла на внешний репозиторий.
	git push

52. На веб интерфейсе создать файл bug_report.txt.
	1) Зайти в репозиторий TXT на Git Hub
	2) Кликнуть на кнопку Add file
	3) В отоброжаемом окне кликнуть Create new file
	4) Присвоить имя создоваемому файлу bug_report.txt

53. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	1) Проскролить страницу из 52-го задания вниз и нажать на кнопку "Commit new file"

54. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
	1) Зайти в репозиторий TXT
	2) Кликнуть на файл bug_report.txt
	3) Кликнуть на занчок карандаша ("Edit this file")
	1.Title
	2.Steps_to_reproduce:
				Step1
    				Step2
    				Step3
	3.Expected_result: the_result_we_need
  	4.Actual_result: the_result_of_which_must_be
 	5.Priority_factor:
    				Low
    				Medium
   		 		High
  	6.Severity_factor:
    				Trivial
   				Minor
    				Major
    				Critical
    				Blocker
	7. Environment
 		
55. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	1) Проскролить страницу вниз, описать изменеия в файле в поле "Commit changes" и нажать на кнопку  "Commit new file"

56. Синхронизировать внешний и локальный репозиторий TXT
	git fetch
	git pull